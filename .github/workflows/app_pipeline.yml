# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flask-app workflow

on:
  push:
    branches:
      - "dev"
      - "stg"
      # - "main" #prod
    paths:
      - '02-flask-app/**'
      - '.github/workflows/app*.yml'

  pull_request:
    branches:
      - "dev"
      - "stg"
      # - "main" #prod
    paths:
      - '02-flask-app/**'
      - '.github/workflows/app*.yml'

defaults:
  run:
    shell: bash
    working-directory: 02-flask-app/

jobs:

  code-quality:
    runs-on: ubuntu-latest
    env:
      ENV: "dev"

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - uses: Gr1N/setup-poetry@v7
      with:
        poetry-version: 1.1.12

    - name: Install dependencies and packages
      run: |
        python3 -m venv env && source env/bin/activate
        poetry env use 3.10

    - name: Update poetry cache
      run: rm poetry.lock && poetry env use 3.10 && poetry install --no-interaction

    - name: Lint with flake8
      run: poetry run flake8 src/
      continue-on-error: true

    - name: Run isort
      run: |
        source env/bin/activate
        poetry run isort --line-length 90 --multi-line VERTICAL_HANGING_INDENT --check-only --diff src/
      continue-on-error: true

  Test:
    name: Test Image
    needs: code-quality
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ENV: "dev"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - uses: Gr1N/setup-poetry@v7
        with:
          poetry-version: 1.1.12

      - name: Install dependencies and packages
        run: |
          python3 -m venv env && source env/bin/activate
          poetry env use 3.10

      - name: Update poetry cache
        run: rm poetry.lock && poetry env use 3.10 && poetry install --no-interaction

      - name: Run DEV test scripts
        run: |
          ./run_app_dev.sh &
          poetry run pytest

      - name: Run Prod test scripts
        run: |
          ./run_app_prod.sh &
          poetry run pytest --host http://localhost:8600


  build:
    name: Build Image
    needs: Test
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.build-image.outputs.image }}

    steps:
      # - name: Maximize build space
      #   uses: easimon/maximize-build-space@master
      #   with:
      #     root-reserve-mb: 46080
      #     swap-size-mb: 1024
      #     remove-dotnet: 'true'
      #     remove-android: 'true'
      #     remove-haskell: 'true'

      - name: Checkout
        uses: actions/checkout@v3

      # - name: Run sonar scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # # If you wish to fail your job when the Quality Gate is red, uncomment the
      # # following lines. This would typically be used to fail a deployment.
      # - name: Sonar quality gate action
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Dev environment
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/dev') || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'dev' && github.event.action != 'closed') }}
        run: |
          echo "AWS_REGION=eu-central-1" >> $GITHUB_ENV
          echo "ECS_SERVICE=xpovx-service-dev" >> $GITHUB_ENV
          echo "ECS_CLUSTER=xpovx-cluster-dev" >> $GITHUB_ENV
          echo "ECR_REPOSITORY0=xpovx-dev-falsk-app" >> $GITHUB_ENV
          echo "ECR_REPOSITORY1=xpovx-dev-nginx" >> $GITHUB_ENV
          echo "CONTAINER_NAME0=xpovx-container-dev-falsk-app" >> $GITHUB_ENV
          echo "CONTAINER_NAME1=xpovx-container-dev-nginx" >> $GITHUB_ENV

      - name: Set up stg environment
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/stg') || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'stg' && github.event.action != 'closed') }}
        run: |
          echo "AWS_REGION=eu-central-1" >> $GITHUB_ENV
          echo "ECS_SERVICE=xpov-service-stg" >> $GITHUB_ENV
          echo "ECS_CLUSTER=xpov-cluster-stg" >> $GITHUB_ENV
          echo "ECR_REPOSITORY0=xpov-stg-nginx" >> $GITHUB_ENV
          echo "ECR_REPOSITORY1=xpov-stg-nginx" >> $GITHUB_ENV
          echo "CONTAINER_NAME0=xpov-container-stg-falsk-app" >> $GITHUB_ENV
          echo "CONTAINER_NAME1=xpovx-container-stg-nginx" >> $GITHUB_ENV


      # - name: Set up Prod environment
      #   if: endsWith(github.ref, '/main')
      #   run: |
      #     echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
      #     echo "ECR_REPOSITORY=prepaire-drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_SERVICE=drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_CLUSTER=prepaire" >> $GITHUB_ENV
      #     echo "CONTAINER_NAME=drug-interaction" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY0:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY1:$IMAGE_TAG ./nginx
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ steps.build-image.outputs.image }}
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL'
      #     timeout: 20m0s

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Microsoft Teams Notification
      #   uses: skitionek/notify-microsoft-teams@master
      #   if: always()
      #   with:
      #     webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
      #     needs: ${{ toJson(needs) }}
      #     job: ${{ toJson(job) }}
      #     steps: ${{ toJson(steps) }}


  deploy:
    name: Deploy image
    if: ${{ ( github.event_name == 'push' ) || ( github.event_name == 'pull_request' && github.event.action == 'closed') }}
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - run: echo ${{needs.build.outputs.images}}

      - name: Set up Dev environment
        if: endsWith(github.ref, '/dev')
        run: |
          echo "AWS_REGION=eu-central-1" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=xpovx-dev-falsk-app" >> $GITHUB_ENV
          echo "ECS_SERVICE=xpovx-service-dev" >> $GITHUB_ENV
          echo "ECS_CLUSTER=xpovx-cluster-dev" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION=xpovx-task-dev" >> $GITHUB_ENV
          echo "CONTAINER_NAME=xpovx-container-dev-falsk-app" >> $GITHUB_ENV

      - name: Set up stg environment
        if: endsWith(github.ref, '/stg')
        run: |
          echo "AWS_REGION=eu-central-1" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=xpov-stg-falsk-app" >> $GITHUB_ENV
          echo "ECS_SERVICE=xpov-service-stg" >> $GITHUB_ENV
          echo "ECS_CLUSTER=xpov-cluster-stg" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION=xpov-task-stg" >> $GITHUB_ENV
          echo "CONTAINER_NAME=xpov-container-stg-falsk-app" >> $GITHUB_ENV

      # - name: Set up Prod environment
      #   if: endsWith(github.ref, '/main')
      #   run: |
      #     echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
      #     echo "ECR_REPOSITORY=prepaire-drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_SERVICE=drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_CLUSTER=prepaire" >> $GITHUB_ENV
      #     echo "ECS_TASK_DEFINITION=.aws/prod-drug-interaction-task-definition.json" >> $GITHUB_ENV
      #     echo "CONTAINER_NAME=drug-interaction" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > /tmp/task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: /tmp/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build.outputs.images }}

      - name: Deploy Amazon ECS task definition
        id: deploy-image
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-definition.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # - name: Microsoft Teams Notification
      #   uses: skitionek/notify-microsoft-teams@master
      #   if: always()
      #   with:
      #     webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
      #     needs: ${{ toJson(needs) }}
      #     job: ${{ toJson(job) }}
      #     steps: ${{ toJson(steps) }}

