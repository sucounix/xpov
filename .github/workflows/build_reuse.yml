# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: docker build reuse

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      github_event_name:
        required: true
        type: string

    secrets:
      # GIT_ACTION_PAT:
      #   required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  environment: ${{ inputs.environment }}
  github_event_name: ${{ inputs.github_event_name }}

defaults:
  run:
    shell: bash
    working-directory: 02-flask-app/

jobs:

  prepare:
    runs-on: [ ubuntu-latest ]
    outputs:
      version: ${{ steps.version.outputs.version }}
      # secret_list: "${{ steps.vars.outputs.secret_list }}"
      # region: ${{ steps.vars.outputs.region }}
      # docker_image: ${{ steps.vars.outputs.image }}
      docker_tag: ${{ steps.vars.outputs.image_tag }}
      # docker_registry: ${{ steps.vars.outputs.docker_registry }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Git Version
        id: version
        uses: codacy/git-version@2.5.3
        with:
          release-branch: main
          dev-branch: dev
          minor-identifier: feat(


      # - name: Set environment for ${{ env.environment }} -ver
      #   run: |
      #     echo "DOCKER_IMAGE_TAG=${{ env.environment }}" >> $GITHUB_ENV


  build:


    name: Build Image
    # needs: Test
    runs-on: ubuntu-latest
    outputs:
      # images: ${{ steps.build-image.outputs.image }}
      version: ${{ needs.prepare.outputs.version }}


    steps:


      # - name: Maximize build space
      #   uses: easimon/maximize-build-space@master
      #   with:
      #     root-reserve-mb: 46080
      #     swap-size-mb: 1024
      #     remove-dotnet: 'true'
      #     remove-android: 'true'
      #     remove-haskell: 'true'

      - name: Checkout
        uses: actions/checkout@v3
      - name: Know the Ver
        run: echo ${{needs.prepare.outputs.version}}

      # - name: Run sonar scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # # If you wish to fail your job when the Quality Gate is red, uncomment the
      # # following lines. This would typically be used to fail a deployment.
      # - name: Sonar quality gate action
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Dev environment
        # if: endsWith(github.ref, '/dev')
        run: |
          echo "AWS_REGION=eu-central-1" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=xpovx-dev-falsk-app" >> $GITHUB_ENV
          echo "ECS_SERVICE=xpovx-service-dev" >> $GITHUB_ENV
          echo "ECS_CLUSTER=xpovx-cluster-dev" >> $GITHUB_ENV
          echo "CONTAINER_NAME=xpovx-container-dev-falsk-app" >> $GITHUB_ENV

      # - name: Set up Stage environment
      #   if: endsWith(github.ref, '/stage')
      #   run: |
      #     echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
      #     echo "ECR_REPOSITORY=prepaire-stage-drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_SERVICE=drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_CLUSTER=prepaire-stage-ecs" >> $GITHUB_ENV
      #     echo "CONTAINER_NAME=drug-interaction" >> $GITHUB_ENV

      # - name: Set up Prod environment
      #   if: endsWith(github.ref, '/main')
      #   run: |
      #     echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
      #     echo "ECR_REPOSITORY=prepaire-drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_SERVICE=drug-interaction" >> $GITHUB_ENV
      #     echo "ECS_CLUSTER=prepaire" >> $GITHUB_ENV
      #     echo "CONTAINER_NAME=drug-interaction" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      # - name: Build, tag, and push image to Amazon ECR
      - name: Build if pr is done on ${{ inputs.environment }} without ${{ inputs.environment }} tag
        if: ${{ inputs.github_event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
        id: build-image-without
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: |
            ${{ github.sha }}
            ${{ needs.prepare.outputs.version }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set environment for ${{ env.environment }}
        run: |
          echo "DOCKER_IMAGE_TAG=${{ env.environment }}" >> $GITHUB_ENV

      - name: Know the Image Tag
        run: echo ${{env.DOCKER_IMAGE_TAG}}

      - name: push if pr is done on ${{ inputs.environment }} without ${{ inputs.environment }} tag
        if: ${{ inputs.github_event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
        id: push-image-without
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: |
            ${{ github.sha }}
            ${{ needs.prepare.outputs.version }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build only on Push event
        if: inputs.github_event_name == 'push'
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: |
            ${{ github.sha }}
            ${{ env.DOCKER_IMAGE_TAG }}
            ${{ needs.prepare.outputs.version }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: |
            ${{ github.sha }}
            ${{env.DOCKER_IMAGE_TAG}}
            ${{ needs.prepare.outputs.version }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ steps.build-image.outputs.image }}
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL'
      #     timeout: 20m0s

  # release:
  #   runs-on: [ubuntu-latest, '${{ inputs.environment }}' ]
  #   needs: build
  #   if: inputs.github_event_name == 'push' && inputs.environment == 'prod'
  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.head_ref }}
  #         fetch-depth: 0
  #     - name: Bump version and push tag
  #       id: tag_version
  #       uses: mathieudutour/github-tag-action@d745f2e74aaf1ee82e747b181f7a0967978abee0
  #       with:
  #         github_token: ${{ secrets.GIT_ACTION_PAT }}
  #         release_branches: main
  #         custom_tag: ${{ needs.prepare.outputs.version }}
  #     - name: Create a GitHub release
  #       uses: ncipollo/release-action@58ae73b360456532aafd58ee170c045abbeaee37
  #       with:
  #         tag: ${{ steps.tag_version.outputs.new_tag }}
  #         name: Release ${{ steps.tag_version.outputs.new_tag }}
  #         body: ${{ steps.tag_version.outputs.changelog }}


      # - name: Microsoft Teams Notification
      #   uses: skitionek/notify-microsoft-teams@master
      #   if: always()
      #   with:
      #     webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
      #     needs: ${{ toJson(needs) }}
      #     job: ${{ toJson(job) }}
      #     steps: ${{ toJson(steps) }}

  # deploy:
  #   name: Deploy image
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:


  #     - name: Checkout
  #       uses: actions/checkout@v3


  #     - run: echo ${{needs.build.outputs.images}}



  #     - name: Set up Dev environment
  #       if: endsWith(github.ref, '/dev')
  #       run: |
  #         echo "AWS_REGION=eu-central-1" >> $GITHUB_ENV
  #         echo "ECR_REPOSITORY=xpovx-dev-falsk-app" >> $GITHUB_ENV
  #         echo "ECS_SERVICE=xpovx-service-dev" >> $GITHUB_ENV
  #         echo "ECS_CLUSTER=xpovx-cluster-dev" >> $GITHUB_ENV
  #         echo "ECS_TASK_DEFINITION=xpovx-task-dev" >> $GITHUB_ENV
  #         echo "CONTAINER_NAME=xpovx-container-dev-falsk-app" >> $GITHUB_ENV

  #     # - name: Set up Stage environment
  #     #   if: endsWith(github.ref, '/stage')
  #     #   run: |
  #     #     echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
  #     #     echo "ECR_REPOSITORY=prepaire-stage-drug-interaction" >> $GITHUB_ENV
  #     #     echo "ECS_SERVICE=drug-interaction" >> $GITHUB_ENV
  #     #     echo "ECS_CLUSTER=prepaire-stage-ecs" >> $GITHUB_ENV
  #     #     echo "ECS_TASK_DEFINITION=.aws/stage-drug-interaction-task-definition.json" >> $GITHUB_ENV
  #     #     echo "CONTAINER_NAME=drug-interaction" >> $GITHUB_ENV

  #     # - name: Set up Prod environment
  #     #   if: endsWith(github.ref, '/main')
  #     #   run: |
  #     #     echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
  #     #     echo "ECR_REPOSITORY=prepaire-drug-interaction" >> $GITHUB_ENV
  #     #     echo "ECS_SERVICE=drug-interaction" >> $GITHUB_ENV
  #     #     echo "ECS_CLUSTER=prepaire" >> $GITHUB_ENV
  #     #     echo "ECS_TASK_DEFINITION=.aws/prod-drug-interaction-task-definition.json" >> $GITHUB_ENV
  #     #     echo "CONTAINER_NAME=drug-interaction" >> $GITHUB_ENV

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

  #     - name: Download task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > /tmp/task-definition.json

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: update-task-definition
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: /tmp/task-definition.json
  #         container-name: ${{ env.CONTAINER_NAME }}
  #         image: ${{ needs.build.outputs.images }}


  #     - name: Deploy Amazon ECS task definition
  #       id: deploy-image
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.update-task-definition.outputs.task-definition }}
  #         service: ${{ env.ECS_SERVICE }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         wait-for-service-stability: true



  #     # - name: Microsoft Teams Notification
  #     #   uses: skitionek/notify-microsoft-teams@master
  #     #   if: always()
  #     #   with:
  #     #     webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
  #     #     needs: ${{ toJson(needs) }}
  #     #     job: ${{ toJson(job) }}
  #     #     steps: ${{ toJson(steps) }}

