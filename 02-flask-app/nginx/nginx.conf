events {
  worker_connections 768;
}


# Log to a file on disk with all errors of the level warn and higher
error_log /var/log/nginx/error.log warn;

http {

  log_format json escape=json '{ "time": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"remote_user": "$remote_user", '
        '"ssl_protocol_cipher": "$ssl_protocol/$ssl_cipher", '
        '"body_bytes_sent": "$body_bytes_sent", '
        '"request_time": "$request_time", '
        '"status": "$status", '
        '"request": "$request", '
        '"request_method": "$request_method", '
        '"http_referrer": "$http_referer", '
        '"http_x_forwarded_for": "$http_x_forwarded_for", '
        '"http_cf_ray": "$http_cf_ray", '
        '"host": "$host", '
        '"server_name": "$server_name", '
        '"upstream_address": "$upstream_addr", '
        '"upstream_status": "$upstream_status", '
        '"upstream_response_time": "$upstream_response_time", '
        '"upstream_response_length": "$upstream_response_length", '
        '"upstream_cache_status": "$upstream_cache_status", '
        '"http_user_agent": "$http_user_agent" }';

  # NGINX will handle gzip compression of responses from the app server
  access_log /var/log/nginx/access.log json;
  gzip on;
  gzip_proxied any;
  gzip_types text/plain application/json;
  gzip_min_length 1000;


  server {
    listen 80;
    location /health {
            access_log off;
            add_header 'Content-Type' 'application/json';
            return 200 '{"status":"UP"}';
    }


    # NGINX will reject anything not matching /api
    location /api {
      # Reject requests with unsupported HTTP method
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
      }

      # Only requests matching the whitelist expectations will
      # get sent to the application server
      proxy_pass http://localhost:8600;
      # health_check; 
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
    }
  }
}


# Docker Configration
# http {
#     log_format json escape=json '{ "time": "$time_iso8601", '
#       '"remote_addr": "$remote_addr", '
#       '"remote_user": "$remote_user", '
#       '"ssl_protocol_cipher": "$ssl_protocol/$ssl_cipher", '
#       '"body_bytes_sent": "$body_bytes_sent", '
#       '"request_time": "$request_time", '
#       '"status": "$status", '
#       '"request": "$request", '
#       '"request_method": "$request_method", '
#       '"http_referrer": "$http_referer", '
#       '"http_x_forwarded_for": "$http_x_forwarded_for", '
#       '"http_cf_ray": "$http_cf_ray", '
#       '"host": "$host", '
#       '"server_name": "$server_name", '
#       '"upstream_address": "$upstream_addr", '
#       '"upstream_status": "$upstream_status", '
#       '"upstream_response_time": "$upstream_response_time", '
#       '"upstream_response_length": "$upstream_response_length", '
#       '"upstream_cache_status": "$upstream_cache_status", '
#       '"http_user_agent": "$http_user_agent" }';

# upstream flask-app {
#     server localhost:5000;
# }

# server {
#     gzip on;
#     access_log /var/log/nginx/access.log json;
#     listen 80;
#     server_name localhost;

#     location / {
#               # Log all info and higher error messages directly into memory, but max out at 32 Mb
#               error_log syslog:server=unix:/var/log/nginx.sock,facility=local7,tag=nginx notice;
#         proxy_pass http://flask-app;
#         proxy_set_header Host "localhost";
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_redirect off;
#     }
# }

# }
